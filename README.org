* garoon.el

  [[https://developer.cybozu.io/hc/ja/categories/200157760-Garoon-SOAP-API][Garoon SOAP API]] のスケジュール API を利用して直近の予定を取得し、Org
  ファイルに書き出す Emacs Lisp 実装です。

  **https 経由で API を実行できない場合には、Garoon 用のパスワードが簡単に流出するリスクがあるため、このパッケージを使用しないで下さい。**

* 主な機能

** 予定の同期

   コマンド: ~garoon-schedule-sync~

   Garoon のスケジュールを Org ファイルに同期します。デフォルトでは直
   近 14 日間の予定を取得します。各イベントの詳細は基本的に Org のプロ
   パティとして格納します。

   例) 

   #+begin_src org
   * 社内会議＠20F                                                :会議:
     :PROPERTIES:
     :ID:       1780021
     :VERSION:  1564117216
     :PLAN:     会議
     :DESCRIPTION: 次期システム更新に向けた構成検討
     :TIMESTAMPS: <2019-08-09 金 15:00--17:00>
     :EXPIRATION: 2019-08-09
     :USERS:    
     :FACILITIES: 
     :END:
  
   #+end_src

   既存の Org エントリがある場合には、同期実行時に ID と VERSION を
   Garoon に問い合わせ、更新情報を取得します。

   もし、該当イベントが更新されている場合、その内容を既存の Org エント
   リに反映しますが、対象となるのは、見出しとタグ、プロパティのみです。

   このため、Org エントリに独自に追加した内容は Garoon との同期で消し
   ません(Garoon に反映もしません)。

   つまり、Garoon のイベントに個人的なメモをつけることができます。

** Garoon イベントと Org エントリの対応

   |-------------------------------+------------------------+---------------------------------------------------|
   | Garoon イベント               | Org エントリ           | 補足                                              |
   |-------------------------------+------------------------+---------------------------------------------------|
   | @detail                       | 見出し                 | 「タイトル」に該当                                |
   | @id                           | ID プロパティ          |                                                   |
   | @version                      | VERSION プロパティ     |                                                   |
   | @plan                         | PLAN プロパティ        | 「予定」に該当                                    |
   | @plan                         | タグ                   | ~garoon-schedule-use-plan-for-tags~ が ~t~ の場合 |
   | @description                  | DESCRIPTION プロパティ | 「メモ」に該当                                    |
   | repeat_info                   | TIMESTAMPS プロパティ  |                                                   |
   | when/datetime                 | TIMESTAMPS プロパティ  |                                                   |
   | when/date                     | TIMESTAMPS プロパティ  |                                                   |
   | members/member/user/@name     | USERS プロパティ       | 「参加者」に該当                                  |
   | members/member/facility/@name | FACILITIES プロパティ  | 「施設」に該当                                    |
   | 予定の最終日付                | EXPIRATION プロパティ  | アーカイブ時に利用                                |
   |-------------------------------+------------------------+---------------------------------------------------|

   Org の見出しやプロパティを編集しても、Garoon には反映されませんので、
   注意して下さい。また、Garoon のイベントが更新されない限り、ずれた同
   期が修復されることはありません。

   もし、意図せぬ編集をキャンセルしたい場合には、該当の Org エントリを
   まるごと削除して ~M-x org-schedule-sync RET~ することで、復活します。

** 過去イベントのアーカイブ

   EXPIRATION プロパティの日付が現在時刻より過去の Org エントリについ
   ては、自動的にアーカイブします。

** 削除されたイベントの扱い

   Garoon の繰り返し予定が変更された場合、そのバージョンを要求すると、
   以前に取得したイベントは削除され、変更されたイベントが追加される仕
   様になっているようです(独自の観測結果)。

   ここで、イベントの削除に応じて Org エントリを削除してしまうと、個人
   的なメモも消失してしまうため、タイムスタンプを非アクティブ化するだ
   けにしてあります。

   例えば、 ~<2019-08-09 金 15:00--17:00>~ というタイムスタンプであれ
   ば、 ~[2019-08-09 金 15:00--17:00]~ になります。

   これにより、削除されたイベントは Org のアジェンダに表示されなくなり
   ますが、Org エントリとしては残り続けます。

* 提供していない機能

  今のところ、下記機能についてはそこまで必要性を感じていないため、実装
  していません。

  - 予定の登録・更新・削除
  - 予定に参加・予定から抜ける
  - 仮予定の確定・削除
  - コメントの追加・削除
  - ファイルのダウンロード

* インストール

  ~~/.emacs.d/init.el~ 等の初期化ファイルに以下を追加するか、

  #+begin_src emacs-lisp
  (require 'garoon.el)
  #+end_src

  あるいは、 ~M-x package-install-file RET~ して garoon.el を指定して下さい。

  最低限、下記設定が必要です。

  - 変数: ~garoon-wsdl-url~

    WSDL の URL を指定します。デフォルトは ~nil~ なので設定が必要です。
    詳細については [[https://developer.cybozu.io/hc/ja/articles/202228464][Garoon SOAP APIの共通仕様]] を参照してください。

  - 変数: ~garoon-auth-source~

    Garoon SOAP API 利用時のユーザーID/パスワードは ~auth-source~ から取得します。
    デフォルトは ~garoon~ です。

  - 変数: ~garoon-schedule-org-file~

    Garoon のイベントを格納する Org ファイルパスです。
    デフォルトは "~/org/garoon.org" です。

* カスタマイズ

  好みに応じて、下記変数を設定することができます。

  - 変数: ~garoon-schedule-fetch-days~
    
    今日から向こう何日間の Garoon イベントを取得するかを指定します。
    デフォルトは ~14~ です。

  - 変数: ~garoon-schedule-use-plan-for-tags~

    Garoon イベントの「予定」の内容を Org エントリのタグに設定するかどうかを指定します。
    デフォルトは ~t~ です。

  - 変数: ~garoon-use-basic-auth~

    Basic 認証を使うかどうかを指定します。デフォルトは ~nil~ です。

    Basic 認証を使わない場合、 **SOAP エンベロープにパスワードが平文で出力** されます。

    ちなみに、私の環境では Basic 認証が利用できないため、この機能が検
    証できていないことをご了承下さい。

  - 変数: ~garoon-locale~

    エラーメッセージの言語を下記ロケールから指定します。

    |-----------+------------------|
    | ロケール  | 言語             |
    |-----------+------------------|
    | "ja"      | 日本語           |
    | "en"      | 英語             |
    | "zh"      | 中国語（簡体字） |
    | "zh-tw"   | 中国語（繁体字） |
    |-----------+------------------|

    デフォルトは "ja" です。

* 定期的に同期させる場合

  Emacs 起動後 1 分したら最初の同期を走らせ、以降10 分置きに同期するな
  ら、以下のような設定を初期化ファイルに入れておけばいいでしょう。

  #+begin_src emacs-lisp
  (run-at-time "1 min" (* 60 10) 'garoon-schedule-sync)
  #+end_src

* トラブルシューティング

  エラーが発生する場合には、 ~*scratch*~ バッファで以下を評価すると、該当個所をデバッグできます。

  #+begin_src emacs-lisp
    (let ((url-debug t)
          (debug-on-error t))
      (garoon-sync-schedule))
  #+end_src

  また、 ~*URL-DEBUG*~ バッファに通信内容が記録されます。

  解決できそうにない場合には、Issues に登録してみて下さい。再現条件が特定できていると、対応もしやすいです。

  Pull Request も歓迎します。
